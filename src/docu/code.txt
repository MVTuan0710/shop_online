 // //cau 9
    // // create oder-detail
    // async create(data: CreateOderDetailDTO): Promise<any> {
    //     try {
    //         // check item exists
    //         const DataGetItem = new GetItemDTO();
    //             DataGetItem.item_id = data.item_id;
    //             DataGetItem.user_id =  data.user_id 
    //         const item = await this.itemService.getByIdNormal(data.item_id);
    //         const ware_house = await this.wareHouseService.getByItemId(data.item_id)
    //         const user = await this.userService.getById(data.user_id)
            
    //         if(!item){
    //             throw new HttpException('failed',500)
    //         }

    //         let quantity = data.quantity 
    //         //update quantity of item in warehouse
    //         for (let i = 0; i < ware_house.length; i++) {
    //             // TH: so luong san pham co trong ware house == 0
    //             if(ware_house[i].quantity === 0){
    //                console.log(`Out of Stock ${item.name}`);
    //                // TH: so luong san pham co trong ware house khac 0
    //             }else{
    //                 // TH: so luong san pham can mua lon hon so luong san pham co trong ware house
    //                 if(quantity > ware_house[i].quantity){
    //                     const hieu = quantity - ware_house[i].quantity;
                            

    //                     const _data = new UpdateWareHouseDTO();
    //                     _data.expiry = ware_house[i].expiry;
    //                     _data.item_id = data.item_id;
    //                     _data.quantity = 0;
    //                     _data.ware_house_id= ware_house[i].ware_house_id;
        
    //                     await this.wareHouseService.updateByOderDetail(_data);
    //                     // cap nhat lai so luong can mua khi sau khi tru 1 record ware house
    //                     // => cap nhat so luong cua san pham o ware house = 0 
    //                     // => cap nhat lai so luong can mua                                                                           
    //                     quantity  =  hieu;
    //             }else{
    //             //TH: so luong san pham can mua == so luong san pham co trong ware house
    //         if(ware_house[i].quantity=== quantity){
    
    //                     //update oder-detail
    //                     const _data = new UpdateWareHouseDTO();
    //                     _data.expiry = ware_house[i].expiry
    //                     _data.item_id = data.item_id;
    //                     // se cap nhat lai so luong san pham co trong ware house == 0
    //                     _data.quantity =0;
    //                     _data.ware_house_id= ware_house[i].ware_house_id;

    //                     await this.wareHouseService.updateByOderDetail(_data)
    //         }else{
    //             //TH: so luong san pham co trong ware house lon hon so luong san pham can mua
    //             const wareHouseQuantity = ware_house[i].quantity
    //                     const result = wareHouseQuantity - data.quantity;
    
    //                     //update oder-detail
    //                     const _data = new UpdateWareHouseDTO();
    //                     _data.user_id = data.user_id;
    //                     _data.expiry = ware_house[i].expiry
    //                     _data.item_id = data.item_id;
    //                     // so luong con lai cua san pham con lai = hieu cua sl san pham trong wh - sl san pham can mua
    //                     _data.quantity = -result;
    //                     _data.ware_house_id= ware_house[i].ware_house_id;
    
    //                     await this.wareHouseService.updateByOderDetail(_data)
    //         }
                        
    
    //                 }
    //             }
    //         }

    //         //check oder
    //         const oder = await this.oderService.getByOderId(data.oder_id);
    //         if (!oder){
    //             throw new HttpException('failed',500)
    //         }

    //         const origin_price = item.price * data.quantity;
    //         if(user.roleEntity.role_id === 1 || user.roleEntity.role_id === 2 || user.roleEntity.role_id === 3){
    //             var new_oder_price = origin_price - (((item.price * data.quantity)/100)*20);
    //             }else{
    //             if(oder.voucher_code){
    //                 // const sale = await this.saleService.getByCode(oder.)
    //                 // if()
    //                 const sale = await this.saleService.getByCode(oder.voucher_code)
    //                 for (let i = 0 ; i< sale.saleItemEntity.length; i++){
    //                     if(sale.saleItemEntity[i].itemEntity.item_id == item.item_id ){
    //                         var new_oder_price = origin_price - sale.value;
    //                     } 
    //                 }
    //             }else{
    //                 var new_oder_price = item.price * data.quantity;
    //             }
    //         }
    
    //         // ep kieu item ve String
    //         const new_item = JSON.stringify(item);

    //         const oderDetailEntity = new OderDetailEntity();
    //         oderDetailEntity.item_info = new_item;
    //         oderDetailEntity.quantity = data.quantity;
    //         oderDetailEntity.item_id = data.item_id;
    //         oderDetailEntity.oder_price = new_oder_price;
    //         oderDetailEntity.origin_price = origin_price;
    //         oderDetailEntity.oderEntity = oder;

    //         // save oder detail
    //         const result = await this.oderDetailRepository.save(oderDetailEntity)
    
    //         const oderDetailLogEntity = new OderDetailLogEntity();
    //         oderDetailLogEntity.quantity = result.quantity;
    //         oderDetailLogEntity.oder_price = result.oder_price;
    //         oderDetailLogEntity.origin_price = result.origin_price;
    //         oderDetailLogEntity.item_info = result.item_info;
    //         oderDetailLogEntity.oderDetailEntity = result;
    
    //         await this.oderDetailLogService.create(oderDetailLogEntity)
   
    
    //         return result;
    //     }catch(err){
    //         console.log(err)
    //         throw new HttpException('failed',500)
    //     }
    // }
    
    // update oder-detail
    // async update(item_id : string, data: CreateItemDTO): Promise<any> {
    //    try {
    //        // check category exists
    //        const _category = await this.categoryService.getById(data.category_id);
    //        if (!_category)
    //            throw console.log('Can`t found Category by category_id');
    //
    //
    //            const category = await this.categoryService.getById(data.category_id);
    //
    //            const itemEntity = new ItemEntity();
    //            itemEntity.name = data.name;
    //            itemEntity.price = data.price;
    //            itemEntity.height = data.height;
    //            itemEntity.weight = data.weight;
    //            itemEntity.usage = data.usage;
    //            itemEntity.categoryEntity =category;
    //
    //         // update account
    //        const result = await this.itemRepository.update(item_id, itemEntity);
    //        return result;
    //    }catch (err){
    //        console.log('error',err);
    //        throw console.log('Can`t update item');
    //    }
    // }



for(let j = 0; j < data.oder_item.length; j++){

            const item = await this.itemService.getByIdNormal(data.oder_item[j].item_id);
            if (!item){
                throw new HttpException('Not Found item', 404);
            }
            data.oder_item[j].item_info = JSON.stringify(item);
            // tinh tong so luong co san trong ware house
            let sum_quantity_of_item_in_ware_house= 0;
            // tinh hieu giua so luong item can mua va so luong item co trong ware house
            let tmp = 0;
            let ware_house =await this.wareHouserService.getByItemId(data.oder_item[j].item_id);
            for(let z = 0; z < ware_house.length; z++){
                // month = ngay hien tai + 30 ngay 
                // expiry ngay het hang su dung cua item trong ware house
                const month = moment().add(30, 'days').format('DD/MM/YYYY');
                const expiry = moment(ware_house[z].expiry).format('DD/MM/YYYY');
                
                if(month <= expiry){
                    sum_quantity_of_item_in_ware_house += ware_house[z].quantity;
                    
                    if(sum_quantity_of_item_in_ware_house >= data.oder_item[j].quantity)
                        break;
                }
            }

            // cap nhat lai quantity cua item trong ware house
            for(let x = 0; x < ware_house.length; x++){
            
                const month = moment().add(30, 'days').format('DD/MM/YYYY');
                const expiry = moment(ware_house[x].expiry).format('DD/MM/YYYY');

                // tinh toan, update lai ware houe 
                if(month <= expiry){
                    // tinh toan tru lay du de cap nhat quantity cua item trong ware house
                    tmp = data.oder_item[j].quantity - ware_house[x].quantity
                    if(tmp > 0){
                        ware_house[x].quantity = 0
                        await this.wareHouserService.updateByOder(ware_house[x].ware_house_id,ware_house[x].quantity);

                    }else{
                        ware_house[x].quantity = -tmp;
                        await this.wareHouserService.updateByOder(ware_house[x].ware_house_id,ware_house[x].quantity);
                        break;
                    }
                }
            }
            // Tinh tien 
                // tinh origin_price
                data.oder_item[j].origin_price = data.oder_item[j].quantity * item.price;
                // tinh origin_total_money
                data.original_total_money += data.oder_item[j].origin_price;
                if(user.roleEntity.role_id === 3 || user.roleEntity.role_id === 2 || user.roleEntity.role_id === 1 ){
                    var oder_price = data.oder_item[j].origin_price - (((data.oder_item[j].origin_price)/100)*20);
                    data.total_money +=oder_price;
                }else{
                    if(data.voucher_code){
                        const voucher = await this.saleService.getByCode(data.voucher_code);
                        for(let j = 0; j < voucher.saleItemEntity.length; j++){
                            if(data.oder_item[j].item_id == voucher.saleItemEntity[j].itemEntity.item_id){
                                var oder_price = data.oder_item[j].origin_price - voucher.value;
                                data.total_money +=oder_price;

                                await this.saleItemService.updateByOder(voucher.saleItemEntity[j].sale_item_id,data.oder_item[j].quantity)
                            }else{
                                var oder_price = data.oder_item[j].origin_price;
                                data.total_money +=oder_price;
                            }
                        }
                    }else{
                        let oder_price = data.oder_item[j].origin_price;
                        data.total_money += oder_price;

                    }
                }
            const new_oder_detail = new OderDetailEntity();
            new_oder_detail.item_info = data.oder_item[j].item_info;
            new_oder_detail.item_id = data.oder_item[j].item_id;
            new_oder_detail.quantity = data.oder_item[j].quantity,
            new_oder_detail.oderEntity = oder;
            new_oder_detail.oder_price = oder_price;
            new_oder_detail.origin_price =  data.oder_item[j].origin_price;
            
            await this.oderDetailService.create(new_oder_detail);
            
        }






        const warehouse = await this.wareHouseRepository.findOne({where : {ware_house_id : ware_house_id}});
            
            const wareHouseEntity = new WareHouseEntity();
            wareHouseEntity.expiry = warehouse.expiry;
            wareHouseEntity.quantity = quantity;
            wareHouseEntity.userEntity = warehouse.userEntity;
            wareHouseEntity.itemEntity = warehouse.itemEntity;

           await this.wareHouseRepository.update(ware_house_id,wareHouseEntity);
           const result = await this.wareHouseRepository.findOne({where: {ware_house_id: ware_house_id}})

           const new_wareHouseLogEntity = new WareHouseLogEntity();
           new_wareHouseLogEntity.expiry = wareHouseEntity.expiry;
           new_wareHouseLogEntity.quantity= wareHouseEntity.quantity;
           new_wareHouseLogEntity.wareHouseEntity = result

           await this.wareHouseLogService.create(new_wareHouseLogEntity)