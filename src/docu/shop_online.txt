1 chỉ SA được sử dụng tất cả api ở Categories, Items 
2 WM được sử dụng tất cả api ở ware_house
3 BM được sử dụng tất cả api ở item
4 SA được tham gia cv của WM, BM
5 SA được create or delete WM, BM nhưng k được delete User

create order detail
async create(data: CreateOderDetailDTO, token: any): Promise<OderDetailEntity> {
        try {
            // check item exists
            const item  = await this.itemService.getById(data.item_id,token);
            if(!item){
                throw console.error(`Can't found Item`);
            }
            // const a = String(item.wareHouseEntity.expiry);
            // moment(a).format('DD/MM/YYYY')
            // console.log(a);
            
            
            //get ware house
            const warehouse = await this.wareHouseService.getById(item.wareHouseEntity.ware_house_id)
            //quantity
            if(item.wareHouseEntity.quantity === 0){
                throw new HttpException('Out of stock', 500);

            }else{
                if(data.quantity > item.wareHouseEntity.quantity){
                    throw new HttpException(`Stock only ${item.wareHouseEntity.quantity}`, 500);

                }else{
                    const wareHouseQuantity = item.wareHouseEntity.quantity
                    const result = wareHouseQuantity - data.quantity;

                    //update ware-house
                    const _data = new UpdateWareHouseDTO();
                    _data.user_id = warehouse.userEntity.user_id;
                    _data.expiry = item.wareHouseEntity.expiry
                    _data.item_id = data.item_id;
                    _data.quantity =result;
                    _data.ware_house_id= item.wareHouseEntity.ware_house_id;
                    
                    await this.wareHouseService.update(_data)

                }
            }
            
            const _token = token.authorization.split(" ");
            const payload = this.jwtService.verify(_token[1]); 
            console.log(payload);
            
            if(payload.role.role_id === 1 || payload.role.role_id === 2 || payload.role.role_id === 3){

                var _total_money = item.price * data.quantity - (((item.price * data.quantity)/100)*20)
                
            }else{
                
                var _total_money = item.price * data.quantity ;
            }

            const oder = await this.oderService.getByOderId(data.oder_id);
            //check oder
            

            if (!item){
                throw console.log(`The item don't exist`);
            }

            const oderDetailEntity = new OderDetailEntity();
            oderDetailEntity.quantity = data.quantity;
            oderDetailEntity.itemEntity = item;
            oderDetailEntity.total_money = _total_money;
            oderDetailEntity.oderEntity = oder;

            // save oder detail
            const result = await this.oderDetailRepository.save(oderDetailEntity);
            return result;
        }catch(err){
            console.log("errors",err);
             throw console.log('Can`t create Oder detail');
        }
    }

    create item
   async create(data: CreateItemDTO): Promise<ItemEntity> {
        try {
            //check item exists
            const item  = await this.itemRepository.findOne({
                where: {name: data.name },
                // relations: { userEntity : true }
            });;
            if (item){
                throw console.log('The item is exist');
            }
            
            const category = await this.categoryService.getById(data.category_id);

            const itemEntity = new ItemEntity();
            itemEntity.name = data.name;
            itemEntity.price = data.price;
            itemEntity.height = data.height;
            itemEntity.weight = data.weight;
            itemEntity.usage = data.usage;
            itemEntity.categoryEntity =category;

            //save item 
            const result = await this.itemRepository.save(itemEntity);
            return result;
        }catch(err){
            console.log("errors",err);
             throw console.log('Can`t create Account');
        }
    }